{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
\f3\froman\fcharset0 Times-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww13440\viewh15840\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293\partightenfactor0
\ls1\ilvl0
\f0\b\fs36 \cf0 Pretests - Chapter 3
\f1\b0\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Abigail Pryor, MTEC-340-001\

\fs28 \ul \
\pard\pardeftab720\sa240\partightenfactor0

\f2\fs29\fsmilli14667 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ulnone Chapter 3 \'96 Diving into Variables, Types, and Methods 
\fs24 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa293\partightenfactor0
\ls2\ilvl0
\fs29\fsmilli14667 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
What is the purpose of a semicolon? What does it tell the compiler? \cb1 \uc0\u8232 
\f3\b The semicolon goes at the end of each statement to separate them for code compiler to process.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
How does the compiler interpret line breaks or whitespace? \cb1 \uc0\u8232 
\f3\b Whitespace and line breaks are ignored by the code compiler, it does not matter.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
What are type only declarations? \cb1 \uc0\u8232 
\f3\b You use this when you know the type of data that you want the variable to contain but you do not know its value yet. This lets you assign the value somewhere else.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
What are access modifiers and what are their names? \cb1 \uc0\u8232 
\f3\b It is like a security setting, determining who and what can access the information within the variable. Public, private, protected, and internal are the 4 types of access modifiers.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
What is the required syntax to declare a string? What about a float? \cb1 \uc0\u8232 
\f3\b Start the line of code with $ and follow it with variables and values. The actual text value needs to be inside a pair of double quotes, while float values need to end with a lowercase f.
\f2\b0\fs24 \uc0\u8232 
\fs29\fsmilli14667 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
How do you create and how do you add variables to an interpolated string? \cb1 \uc0\u8232 
\f3\b Start the line of code with $ and follow it with variables and values within double quotes. Curly brackets are needed around the variable name when you pass it in the string text.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
What are the types of data conversion and what syntax do we need? \cb1 \uc0\u8232 
\f3\b Implicit typically takes place automatically when a smaller value will fit into another variable type without any rounding (ex. - integer can be implicitly converted into a float without any code required)\
		Explicit takes place when there is a chance you may lose a variable\'92s information when you convert it (ex. - converting a double value into an integer value. You can use int ExplicitConversion = (int)x; for things like this.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
What is var and when should you use it? Why shouldn\'92t you always use it? \cb1 \uc0\u8232 
\f3\b Var is a keyword that lets the program know what type of data needs to be determined by its value. You should not always use it because it is something that is inferred, or guessed, and is not always what you want it to be.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
What is scope and what are the types of scope? \cb1 \uc0\u8232 
\f3\b Scope determines the outside classes that can access the information within a variable. It is used to describe where a given variable exists and its access point within its class. The three types are Global scope, Class scope, and Local scope.
\f2\b0 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	10.	}\expnd0\expndtw0\kerning0
What is the difference between a parameter and an argument, and how do they relate \cb1 \uc0\u8232 \cb3 to each other? \cb1 \uc0\u8232 
\f3\b Parameters are blueprints for the types of values that a method accepts, and the arguments are the values themselves (can be literal values or other variables you have declared within the class).
\f2\b0 \
}